{"version":3,"sources":["../../src/components/flow-fullscreen/index.jsx"],"names":["React","useEffect","useState","useRef","useCallback","FullscreenOutlined","FullscreenExitOutlined","FlowFullScreen","props","el","isFullScreen","setIsFullScreen","document","addEventListener","_listenScreenChange","bind","removeEventListener","console","log","fullscreenElement","_onFullScreen","current","requestFullscreen","_onExitFullScreen","exitFullscreen"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,WAA7C,QAAgE,OAAhE;AAGA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,mBAA3D;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAAA,MACpCC,EADoC,GAC7BD,KAD6B,CACpCC,EADoC;;AAAA,kBAGJP,QAAQ,CAAC,KAAD,CAHJ;AAAA,MAGrCQ,YAHqC;AAAA,MAGvBC,eAHuB;;AAK5CV,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8CC,mBAAmB,CAACC,IAApB,CAAyB,KAAzB,CAA9C;AACA,WAAO,YAAM;AACXH,MAAAA,QAAQ,CAACI,mBAAT,CAA6B,kBAA7B,EAAiDF,mBAAmB,CAACC,IAApB,CAAyB,KAAzB,CAAjD;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMD,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAK;AAC/BG,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAP,IAAAA,eAAe,CAACC,QAAQ,CAACO,iBAAT,KAA+B,IAAhC,CAAf;AACD,GAHD;;AAKA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BX,IAAAA,EAAE,CAACY,OAAH,CAAWC,iBAAX;AACD,GAFD;;AAIA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BX,IAAAA,QAAQ,CAACY,cAAT;AACD,GAFD;;AAIA,SAAOd,YAAY,gBACjB;AAAQ,IAAA,IAAI,eAAE,oBAAC,sBAAD,OAAd;AAA0C,IAAA,OAAO,EAAEa;AAAnD,oBADiB,gBAKjB;AAAQ,IAAA,IAAI,eAAE,oBAAC,kBAAD,OAAd;AAAsC,IAAA,OAAO,EAAEH;AAA/C,oBALF;AASD","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { Button } from \"antd\";\n\nimport { FullscreenOutlined, FullscreenExitOutlined } from \"@ant-design/icons\";\n\nexport default function FlowFullScreen(props) {\n  const { el } = props;\n\n  const [isFullScreen, setIsFullScreen] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', _listenScreenChange.bind(this))\n    return () => {\n      document.removeEventListener('fullscreenchange', _listenScreenChange.bind(this))\n    };\n  }, []);\n\n  const _listenScreenChange = () =>{\n    console.log('change')\n    setIsFullScreen(document.fullscreenElement !== null);\n  }\n\n  const _onFullScreen = () => {\n    el.current.requestFullscreen();\n  };\n\n  const _onExitFullScreen = () => {\n    document.exitFullscreen();\n  };\n\n  return isFullScreen ? (\n    <Button icon={<FullscreenExitOutlined />} onClick={_onExitFullScreen}>\n      退出\n    </Button>\n  ) : (\n    <Button icon={<FullscreenOutlined />} onClick={_onFullScreen}>\n      全屏\n    </Button>\n  );\n}\n"],"file":"index.js"}